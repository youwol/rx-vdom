{
    "name": "@youwol/rx-vdom",
    "documentation": {
        "sections": []
    },
    "path": "",
    "attributes": [],
    "types": [
        {
            "name": "RxElementTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait for a reactive (un-tagged) HTML element.\nThis class extends the standard HTMLElement with additional properties defined by  [ReactiveTrait](@nav/api/.ReactiveTrait) .\nFor tag-specific elements, refer to  [RxHTMLElement](@nav/api/.RxHTMLElement) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "RxElementTrait",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export class RxElementTrait extends ReactiveTrait(HTMLElement)",
                "implementation": "export class RxElementTrait extends ReactiveTrait(HTMLElement) {}",
                "startLine": 19,
                "endLine": 20,
                "references": {
                    "RxElementTrait": "@nav/api/.RxElementTrait",
                    "ReactiveTrait(HTMLElement).constructor": "-1",
                    "ReactiveTrait(HTMLElement).ATTRIBUTE_NODE": "-1",
                    "ReactiveTrait(HTMLElement).CDATA_SECTION_NODE": "-1",
                    "ReactiveTrait(HTMLElement).COMMENT_NODE": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_FRAGMENT_NODE": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_NODE": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_POSITION_CONTAINED_BY": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_POSITION_CONTAINS": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_POSITION_DISCONNECTED": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_POSITION_FOLLOWING": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_POSITION_PRECEDING": "-1",
                    "ReactiveTrait(HTMLElement).DOCUMENT_TYPE_NODE": "-1",
                    "ReactiveTrait(HTMLElement).ELEMENT_NODE": "-1",
                    "ReactiveTrait(HTMLElement).ENTITY_NODE": "-1",
                    "ReactiveTrait(HTMLElement).ENTITY_REFERENCE_NODE": "-1",
                    "ReactiveTrait(HTMLElement).NOTATION_NODE": "-1",
                    "ReactiveTrait(HTMLElement).PROCESSING_INSTRUCTION_NODE": "-1",
                    "ReactiveTrait(HTMLElement).TEXT_NODE": "-1",
                    "ReactiveTrait(HTMLElement).accessKey": "-1",
                    "ReactiveTrait(HTMLElement).accessKeyLabel": "-1",
                    "ReactiveTrait(HTMLElement).ariaAtomic": "-1",
                    "ReactiveTrait(HTMLElement).ariaAutoComplete": "-1",
                    "ReactiveTrait(HTMLElement).ariaBusy": "-1",
                    "ReactiveTrait(HTMLElement).ariaChecked": "-1",
                    "ReactiveTrait(HTMLElement).ariaColCount": "-1",
                    "ReactiveTrait(HTMLElement).ariaColIndex": "-1",
                    "ReactiveTrait(HTMLElement).ariaColSpan": "-1",
                    "ReactiveTrait(HTMLElement).ariaCurrent": "-1",
                    "ReactiveTrait(HTMLElement).ariaDisabled": "-1",
                    "ReactiveTrait(HTMLElement).ariaExpanded": "-1",
                    "ReactiveTrait(HTMLElement).ariaHasPopup": "-1",
                    "ReactiveTrait(HTMLElement).ariaHidden": "-1",
                    "ReactiveTrait(HTMLElement).ariaInvalid": "-1",
                    "ReactiveTrait(HTMLElement).ariaKeyShortcuts": "-1",
                    "ReactiveTrait(HTMLElement).ariaLabel": "-1",
                    "ReactiveTrait(HTMLElement).ariaLevel": "-1",
                    "ReactiveTrait(HTMLElement).ariaLive": "-1",
                    "ReactiveTrait(HTMLElement).ariaModal": "-1",
                    "ReactiveTrait(HTMLElement).ariaMultiLine": "-1",
                    "ReactiveTrait(HTMLElement).ariaMultiSelectable": "-1",
                    "ReactiveTrait(HTMLElement).ariaOrientation": "-1",
                    "ReactiveTrait(HTMLElement).ariaPlaceholder": "-1",
                    "ReactiveTrait(HTMLElement).ariaPosInSet": "-1",
                    "ReactiveTrait(HTMLElement).ariaPressed": "-1",
                    "ReactiveTrait(HTMLElement).ariaReadOnly": "-1",
                    "ReactiveTrait(HTMLElement).ariaRequired": "-1",
                    "ReactiveTrait(HTMLElement).ariaRoleDescription": "-1",
                    "ReactiveTrait(HTMLElement).ariaRowCount": "-1",
                    "ReactiveTrait(HTMLElement).ariaRowIndex": "-1",
                    "ReactiveTrait(HTMLElement).ariaRowSpan": "-1",
                    "ReactiveTrait(HTMLElement).ariaSelected": "-1",
                    "ReactiveTrait(HTMLElement).ariaSetSize": "-1",
                    "ReactiveTrait(HTMLElement).ariaSort": "-1",
                    "ReactiveTrait(HTMLElement).ariaValueMax": "-1",
                    "ReactiveTrait(HTMLElement).ariaValueMin": "-1",
                    "ReactiveTrait(HTMLElement).ariaValueNow": "-1",
                    "ReactiveTrait(HTMLElement).ariaValueText": "-1",
                    "ReactiveTrait(HTMLElement).assignedSlot": "-1",
                    "ReactiveTrait(HTMLElement).attributeStyleMap": "-1",
                    "ReactiveTrait(HTMLElement).attributes": "-1",
                    "ReactiveTrait(HTMLElement).autocapitalize": "-1",
                    "ReactiveTrait(HTMLElement).autofocus": "-1",
                    "ReactiveTrait(HTMLElement).baseURI": "-1",
                    "ReactiveTrait(HTMLElement).childElementCount": "-1",
                    "ReactiveTrait(HTMLElement).childNodes": "-1",
                    "ReactiveTrait(HTMLElement).children": "-1",
                    "ReactiveTrait(HTMLElement).classList": "-1",
                    "ReactiveTrait(HTMLElement).className": "-1",
                    "ReactiveTrait(HTMLElement).clientHeight": "-1",
                    "ReactiveTrait(HTMLElement).clientLeft": "-1",
                    "ReactiveTrait(HTMLElement).clientTop": "-1",
                    "ReactiveTrait(HTMLElement).clientWidth": "-1",
                    "ReactiveTrait(HTMLElement).contentEditable": "-1",
                    "ReactiveTrait(HTMLElement).dataset": "-1",
                    "ReactiveTrait(HTMLElement).dir": "-1",
                    "ReactiveTrait(HTMLElement).draggable": "-1",
                    "ReactiveTrait(HTMLElement).enterKeyHint": "-1",
                    "ReactiveTrait(HTMLElement).firstChild": "-1",
                    "ReactiveTrait(HTMLElement).firstElementChild": "-1",
                    "ReactiveTrait(HTMLElement).hidden": "-1",
                    "ReactiveTrait(HTMLElement).id": "-1",
                    "ReactiveTrait(HTMLElement).inert": "-1",
                    "ReactiveTrait(HTMLElement).innerHTML": "-1",
                    "ReactiveTrait(HTMLElement).innerText": "-1",
                    "ReactiveTrait(HTMLElement).inputMode": "-1",
                    "ReactiveTrait(HTMLElement).isConnected": "-1",
                    "ReactiveTrait(HTMLElement).isContentEditable": "-1",
                    "ReactiveTrait(HTMLElement).lang": "-1",
                    "ReactiveTrait(HTMLElement).lastChild": "-1",
                    "ReactiveTrait(HTMLElement).lastElementChild": "-1",
                    "ReactiveTrait(HTMLElement).localName": "-1",
                    "ReactiveTrait(HTMLElement).namespaceURI": "-1",
                    "ReactiveTrait(HTMLElement).nextElementSibling": "-1",
                    "ReactiveTrait(HTMLElement).nextSibling": "-1",
                    "ReactiveTrait(HTMLElement).nodeName": "-1",
                    "ReactiveTrait(HTMLElement).nodeType": "-1",
                    "ReactiveTrait(HTMLElement).nodeValue": "-1",
                    "ReactiveTrait(HTMLElement).nonce": "-1",
                    "ReactiveTrait(HTMLElement).offsetHeight": "-1",
                    "ReactiveTrait(HTMLElement).offsetLeft": "-1",
                    "ReactiveTrait(HTMLElement).offsetParent": "-1",
                    "ReactiveTrait(HTMLElement).offsetTop": "-1",
                    "ReactiveTrait(HTMLElement).offsetWidth": "-1",
                    "ReactiveTrait(HTMLElement).onabort": "-1",
                    "ReactiveTrait(HTMLElement).onanimationcancel": "-1",
                    "ReactiveTrait(HTMLElement).onanimationend": "-1",
                    "ReactiveTrait(HTMLElement).onanimationiteration": "-1",
                    "ReactiveTrait(HTMLElement).onanimationstart": "-1",
                    "ReactiveTrait(HTMLElement).onauxclick": "-1",
                    "ReactiveTrait(HTMLElement).onbeforeinput": "-1",
                    "ReactiveTrait(HTMLElement).onblur": "-1",
                    "ReactiveTrait(HTMLElement).oncancel": "-1",
                    "ReactiveTrait(HTMLElement).oncanplay": "-1",
                    "ReactiveTrait(HTMLElement).oncanplaythrough": "-1",
                    "ReactiveTrait(HTMLElement).onchange": "-1",
                    "ReactiveTrait(HTMLElement).onclick": "-1",
                    "ReactiveTrait(HTMLElement).onclose": "-1",
                    "ReactiveTrait(HTMLElement).oncontextmenu": "-1",
                    "ReactiveTrait(HTMLElement).oncopy": "-1",
                    "ReactiveTrait(HTMLElement).oncuechange": "-1",
                    "ReactiveTrait(HTMLElement).oncut": "-1",
                    "ReactiveTrait(HTMLElement).ondblclick": "-1",
                    "ReactiveTrait(HTMLElement).ondrag": "-1",
                    "ReactiveTrait(HTMLElement).ondragend": "-1",
                    "ReactiveTrait(HTMLElement).ondragenter": "-1",
                    "ReactiveTrait(HTMLElement).ondragleave": "-1",
                    "ReactiveTrait(HTMLElement).ondragover": "-1",
                    "ReactiveTrait(HTMLElement).ondragstart": "-1",
                    "ReactiveTrait(HTMLElement).ondrop": "-1",
                    "ReactiveTrait(HTMLElement).ondurationchange": "-1",
                    "ReactiveTrait(HTMLElement).onemptied": "-1",
                    "ReactiveTrait(HTMLElement).onended": "-1",
                    "ReactiveTrait(HTMLElement).onerror": "-1",
                    "ReactiveTrait(HTMLElement).onfocus": "-1",
                    "ReactiveTrait(HTMLElement).onformdata": "-1",
                    "ReactiveTrait(HTMLElement).onfullscreenchange": "-1",
                    "ReactiveTrait(HTMLElement).onfullscreenerror": "-1",
                    "ReactiveTrait(HTMLElement).ongotpointercapture": "-1",
                    "ReactiveTrait(HTMLElement).oninput": "-1",
                    "ReactiveTrait(HTMLElement).oninvalid": "-1",
                    "ReactiveTrait(HTMLElement).onkeydown": "-1",
                    "ReactiveTrait(HTMLElement).onkeypress": "-1",
                    "ReactiveTrait(HTMLElement).onkeyup": "-1",
                    "ReactiveTrait(HTMLElement).onload": "-1",
                    "ReactiveTrait(HTMLElement).onloadeddata": "-1",
                    "ReactiveTrait(HTMLElement).onloadedmetadata": "-1",
                    "ReactiveTrait(HTMLElement).onloadstart": "-1",
                    "ReactiveTrait(HTMLElement).onlostpointercapture": "-1",
                    "ReactiveTrait(HTMLElement).onmousedown": "-1",
                    "ReactiveTrait(HTMLElement).onmouseenter": "-1",
                    "ReactiveTrait(HTMLElement).onmouseleave": "-1",
                    "ReactiveTrait(HTMLElement).onmousemove": "-1",
                    "ReactiveTrait(HTMLElement).onmouseout": "-1",
                    "ReactiveTrait(HTMLElement).onmouseover": "-1",
                    "ReactiveTrait(HTMLElement).onmouseup": "-1",
                    "ReactiveTrait(HTMLElement).onpaste": "-1",
                    "ReactiveTrait(HTMLElement).onpause": "-1",
                    "ReactiveTrait(HTMLElement).onplay": "-1",
                    "ReactiveTrait(HTMLElement).onplaying": "-1",
                    "ReactiveTrait(HTMLElement).onpointercancel": "-1",
                    "ReactiveTrait(HTMLElement).onpointerdown": "-1",
                    "ReactiveTrait(HTMLElement).onpointerenter": "-1",
                    "ReactiveTrait(HTMLElement).onpointerleave": "-1",
                    "ReactiveTrait(HTMLElement).onpointermove": "-1",
                    "ReactiveTrait(HTMLElement).onpointerout": "-1",
                    "ReactiveTrait(HTMLElement).onpointerover": "-1",
                    "ReactiveTrait(HTMLElement).onpointerup": "-1",
                    "ReactiveTrait(HTMLElement).onprogress": "-1",
                    "ReactiveTrait(HTMLElement).onratechange": "-1",
                    "ReactiveTrait(HTMLElement).onreset": "-1",
                    "ReactiveTrait(HTMLElement).onresize": "-1",
                    "ReactiveTrait(HTMLElement).onscroll": "-1",
                    "ReactiveTrait(HTMLElement).onscrollend": "-1",
                    "ReactiveTrait(HTMLElement).onsecuritypolicyviolation": "-1",
                    "ReactiveTrait(HTMLElement).onseeked": "-1",
                    "ReactiveTrait(HTMLElement).onseeking": "-1",
                    "ReactiveTrait(HTMLElement).onselect": "-1",
                    "ReactiveTrait(HTMLElement).onselectionchange": "-1",
                    "ReactiveTrait(HTMLElement).onselectstart": "-1",
                    "ReactiveTrait(HTMLElement).onslotchange": "-1",
                    "ReactiveTrait(HTMLElement).onstalled": "-1",
                    "ReactiveTrait(HTMLElement).onsubmit": "-1",
                    "ReactiveTrait(HTMLElement).onsuspend": "-1",
                    "ReactiveTrait(HTMLElement).ontimeupdate": "-1",
                    "ReactiveTrait(HTMLElement).ontoggle": "-1",
                    "ReactiveTrait(HTMLElement).ontouchcancel": "-1",
                    "ReactiveTrait(HTMLElement).ontouchend": "-1",
                    "ReactiveTrait(HTMLElement).ontouchmove": "-1",
                    "ReactiveTrait(HTMLElement).ontouchstart": "-1",
                    "ReactiveTrait(HTMLElement).ontransitioncancel": "-1",
                    "ReactiveTrait(HTMLElement).ontransitionend": "-1",
                    "ReactiveTrait(HTMLElement).ontransitionrun": "-1",
                    "ReactiveTrait(HTMLElement).ontransitionstart": "-1",
                    "ReactiveTrait(HTMLElement).onvolumechange": "-1",
                    "ReactiveTrait(HTMLElement).onwaiting": "-1",
                    "ReactiveTrait(HTMLElement).onwebkitanimationend": "-1",
                    "ReactiveTrait(HTMLElement).onwebkitanimationiteration": "-1",
                    "ReactiveTrait(HTMLElement).onwebkitanimationstart": "-1",
                    "ReactiveTrait(HTMLElement).onwebkittransitionend": "-1",
                    "ReactiveTrait(HTMLElement).onwheel": "-1",
                    "ReactiveTrait(HTMLElement).outerHTML": "-1",
                    "ReactiveTrait(HTMLElement).outerText": "-1",
                    "ReactiveTrait(HTMLElement).ownerDocument": "-1",
                    "ReactiveTrait(HTMLElement).parentElement": "-1",
                    "ReactiveTrait(HTMLElement).parentNode": "-1",
                    "ReactiveTrait(HTMLElement).part": "-1",
                    "ReactiveTrait(HTMLElement).popover": "-1",
                    "ReactiveTrait(HTMLElement).prefix": "-1",
                    "ReactiveTrait(HTMLElement).previousElementSibling": "-1",
                    "ReactiveTrait(HTMLElement).previousSibling": "-1",
                    "ReactiveTrait(HTMLElement).role": "-1",
                    "ReactiveTrait(HTMLElement).scrollHeight": "-1",
                    "ReactiveTrait(HTMLElement).scrollLeft": "-1",
                    "ReactiveTrait(HTMLElement).scrollTop": "-1",
                    "ReactiveTrait(HTMLElement).scrollWidth": "-1",
                    "ReactiveTrait(HTMLElement).shadowRoot": "-1",
                    "ReactiveTrait(HTMLElement).slot": "-1",
                    "ReactiveTrait(HTMLElement).spellcheck": "-1",
                    "ReactiveTrait(HTMLElement).style": "-1",
                    "ReactiveTrait(HTMLElement).tabIndex": "-1",
                    "ReactiveTrait(HTMLElement).tagName": "-1",
                    "ReactiveTrait(HTMLElement).textContent": "-1",
                    "ReactiveTrait(HTMLElement).title": "-1",
                    "ReactiveTrait(HTMLElement).translate": "-1",
                    "VirtualDOM": "@nav/api/.VirtualDOM",
                    "ReactiveTrait(HTMLElement).vDom": "-1",
                    "K": "173",
                    "ReactiveTrait(HTMLElement).addEventListener": "-1",
                    "ReactiveTrait(HTMLElement).after": "-1",
                    "ReactiveTrait(HTMLElement).animate": "-1",
                    "ReactiveTrait(HTMLElement).append": "-1",
                    "T": "438",
                    "ReactiveTrait(HTMLElement).appendChild": "-1",
                    "ReactiveTrait(HTMLElement).attachInternals": "-1",
                    "ReactiveTrait(HTMLElement).attachShadow": "-1",
                    "ReactiveTrait(HTMLElement).before": "-1",
                    "ReactiveTrait(HTMLElement).blur": "-1",
                    "ReactiveTrait(HTMLElement).checkVisibility": "-1",
                    "ReactiveTrait(HTMLElement).click": "-1",
                    "ReactiveTrait(HTMLElement).cloneNode": "-1",
                    "ReactiveTrait(HTMLElement).closest": "-1",
                    "E": "561",
                    "ReactiveTrait(HTMLElement).compareDocumentPosition": "-1",
                    "ReactiveTrait(HTMLElement).computedStyleMap": "-1",
                    "ReactiveTrait(HTMLElement).contains": "-1",
                    "ReactiveTrait(HTMLElement).dispatchEvent": "-1",
                    "ReactiveTrait(HTMLElement).focus": "-1",
                    "ReactiveTrait(HTMLElement).getAnimations": "-1",
                    "ReactiveTrait(HTMLElement).getAttribute": "-1",
                    "ReactiveTrait(HTMLElement).getAttributeNS": "-1",
                    "ReactiveTrait(HTMLElement).getAttributeNames": "-1",
                    "ReactiveTrait(HTMLElement).getAttributeNode": "-1",
                    "ReactiveTrait(HTMLElement).getAttributeNodeNS": "-1",
                    "ReactiveTrait(HTMLElement).getBoundingClientRect": "-1",
                    "ReactiveTrait(HTMLElement).getClientRects": "-1",
                    "ReactiveTrait(HTMLElement).getElementsByClassName": "-1",
                    "ReactiveTrait(HTMLElement).getElementsByTagName": "-1",
                    "ReactiveTrait(HTMLElement).getElementsByTagNameNS": "-1",
                    "ReactiveTrait(HTMLElement).getRootNode": "-1",
                    "ReactiveTrait(HTMLElement).hasAttribute": "-1",
                    "ReactiveTrait(HTMLElement).hasAttributeNS": "-1",
                    "ReactiveTrait(HTMLElement).hasAttributes": "-1",
                    "ReactiveTrait(HTMLElement).hasChildNodes": "-1",
                    "ReactiveTrait(HTMLElement).hasPointerCapture": "-1",
                    "ReactiveTrait(HTMLElement).hidePopover": "-1",
                    "ReactiveTrait(HTMLElement).hookOnDisconnected": "-1",
                    "ReactiveTrait(HTMLElement).insertAdjacentElement": "-1",
                    "ReactiveTrait(HTMLElement).insertAdjacentHTML": "-1",
                    "ReactiveTrait(HTMLElement).insertAdjacentText": "-1",
                    "ReactiveTrait(HTMLElement).insertBefore": "-1",
                    "ReactiveTrait(HTMLElement).isDefaultNamespace": "-1",
                    "ReactiveTrait(HTMLElement).isEqualNode": "-1",
                    "ReactiveTrait(HTMLElement).isSameNode": "-1",
                    "ReactiveTrait(HTMLElement).lookupNamespaceURI": "-1",
                    "ReactiveTrait(HTMLElement).lookupPrefix": "-1",
                    "ReactiveTrait(HTMLElement).matches": "-1",
                    "ReactiveTrait(HTMLElement).normalize": "-1",
                    "Subscription": "@nav/api/.Subscription",
                    "ReactiveTrait(HTMLElement).ownSubscriptions": "-1",
                    "ReactiveTrait(HTMLElement).prepend": "-1",
                    "ReactiveTrait(HTMLElement).querySelector": "-1",
                    "ReactiveTrait(HTMLElement).querySelectorAll": "-1",
                    "ReactiveTrait(HTMLElement).releasePointerCapture": "-1",
                    "ReactiveTrait(HTMLElement).remove": "-1",
                    "ReactiveTrait(HTMLElement).removeAttribute": "-1",
                    "ReactiveTrait(HTMLElement).removeAttributeNS": "-1",
                    "ReactiveTrait(HTMLElement).removeAttributeNode": "-1",
                    "ReactiveTrait(HTMLElement).removeChild": "-1",
                    "ReactiveTrait(HTMLElement).removeEventListener": "-1",
                    "ReactiveTrait(HTMLElement).replaceChild": "-1",
                    "ReactiveTrait(HTMLElement).replaceChildren": "-1",
                    "ReactiveTrait(HTMLElement).replaceWith": "-1",
                    "ReactiveTrait(HTMLElement).requestFullscreen": "-1",
                    "ReactiveTrait(HTMLElement).requestPointerLock": "-1",
                    "ReactiveTrait(HTMLElement).scroll": "-1",
                    "ReactiveTrait(HTMLElement).scrollBy": "-1",
                    "ReactiveTrait(HTMLElement).scrollIntoView": "-1",
                    "ReactiveTrait(HTMLElement).scrollTo": "-1",
                    "ReactiveTrait(HTMLElement).setAttribute": "-1",
                    "ReactiveTrait(HTMLElement).setAttributeNS": "-1",
                    "ReactiveTrait(HTMLElement).setAttributeNode": "-1",
                    "ReactiveTrait(HTMLElement).setAttributeNodeNS": "-1",
                    "ReactiveTrait(HTMLElement).setPointerCapture": "-1",
                    "ReactiveTrait(HTMLElement).showPopover": "-1",
                    "ReactiveTrait(HTMLElement).toggleAttribute": "-1",
                    "ReactiveTrait(HTMLElement).togglePopover": "-1",
                    "ReactiveTrait(HTMLElement).webkitMatchesSelector": "-1",
                    "__class": "1197"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "AnyHTMLAttribute",
            "documentation": {
                "sections": [
                    {
                        "content": "The union of all possible static attribute types for a virtual DOM.\nCorresponding reactive attribute types are constructed on top of these, see  [AttributeLike](@nav/api/.AttributeLike) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "AnyHTMLAttribute",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type AnyHTMLAttribute =\n    | string\n    | number\n    | boolean\n    | CSSAttribute\n    | CustomAttribute",
                "implementation": "",
                "startLine": 38,
                "endLine": 39,
                "references": {
                    "AnyHTMLAttribute": "@nav/api/.AnyHTMLAttribute",
                    "CSSAttribute": "@nav/api/.CSSAttribute",
                    "CustomAttribute": "@nav/api/.CustomAttribute"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "AnyVirtualDOM",
            "documentation": {
                "sections": [
                    {
                        "content": "Type union of all possible virtual DOM types, defined by the  [VirtualDOM](@nav/api/.VirtualDOM)   `tag`  attribute.\nExample:\n ```\nVirtualDOM<'a'> | VirtualDOM<'b'> | VirtualDOM<'br'> // etc.\n```",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "AnyVirtualDOM",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type AnyVirtualDOM = VirtualDOMTagNameMap[keyof VirtualDOMTagNameMap]",
                "implementation": "",
                "startLine": 52,
                "endLine": 53,
                "references": {
                    "AnyVirtualDOM": "@nav/api/.AnyVirtualDOM",
                    "VirtualDOMTagNameMap": "@nav/api/.VirtualDOMTagNameMap"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "AttributeLike",
            "documentation": {
                "sections": [
                    {
                        "content": "Union of the types allowed to define an attribute in a  [VirtualDOM](@nav/api/.VirtualDOM) .\nAn attribute can be a direct type, an observable of that type, or a reactive attribute.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **Target**: The type of the HTML attribute.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "AttributeLike",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type AttributeLike<Target extends AnyHTMLAttribute> =\n    | Target\n    | Observable<Target>\n    | RxAttribute<unknown, Target>",
                "implementation": "",
                "startLine": 60,
                "endLine": 61,
                "references": {
                    "AttributeLike": "@nav/api/.AttributeLike",
                    "AnyHTMLAttribute": "@nav/api/.AnyHTMLAttribute",
                    "Target": "1059",
                    "Observable": "@nav/api/.Observable",
                    "RxAttribute": "@nav/api/.RxAttribute"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BlackListed",
            "documentation": {
                "sections": [
                    {
                        "content": "The attributes of any  `HTMLElement`  that should not be mapped into a  [VirtualDOM](@nav/api/.VirtualDOM)  attribute.\nSee also  [FilterHTMLMembers](@nav/api/.FilterHTMLMembers) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BlackListed",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type BlackListed = 'toString'",
                "implementation": "",
                "startLine": 69,
                "endLine": 70,
                "references": {
                    "BlackListed": "@nav/api/.BlackListed"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CSSAttribute",
            "documentation": {
                "sections": [
                    {
                        "content": "CSS attribute type, as defined by the [csstype](https://github.com/frenic/csstype) library.\n\n> It is possible to substitute a target property name containing hyphens with uppercase letters in the virtual DOM.\nFor example, if  `text-align='justify'`  is expected in the real DOM, it can be provided as:\n ```typescript\n{ textAlign: 'justify' }\n```",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CSSAttribute",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type CSSAttribute = CSS.Properties",
                "implementation": "",
                "startLine": 80,
                "endLine": 81,
                "references": {
                    "CSSAttribute": "@nav/api/.CSSAttribute"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildLike",
            "documentation": {
                "sections": [
                    {
                        "content": "Union of the types allowed to define a child in a  [VirtualDOM](@nav/api/.VirtualDOM) .\nThis includes virtual DOM elements, standard HTML elements, or reactive child elements.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildLike",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ChildLike = AnyVirtualDOM | HTMLElement | RxChild",
                "implementation": "",
                "startLine": 86,
                "endLine": 87,
                "references": {
                    "ChildLike": "@nav/api/.ChildLike",
                    "AnyVirtualDOM": "@nav/api/.AnyVirtualDOM",
                    "RxChild": "@nav/api/.RxChild"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildrenLike",
            "documentation": {
                "sections": [
                    {
                        "content": "Union of the types allowed to define children in a  [VirtualDOM](@nav/api/.VirtualDOM) .\nThis includes arrays of children or reactive children with various policies.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildrenLike",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ChildrenLike =\n    | ChildLike[]\n    | RxChildren<'replace'>\n    | RxChildren<'append'>\n    | RxChildren<'sync'>",
                "implementation": "",
                "startLine": 92,
                "endLine": 93,
                "references": {
                    "ChildrenLike": "@nav/api/.ChildrenLike",
                    "ChildLike": "@nav/api/.ChildLike",
                    "RxChildren": "@nav/api/.RxChildren"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildrenOptionsAppend",
            "documentation": {
                "sections": [
                    {
                        "content": "API for the  `append`  policy of  [RxChildren](@nav/api/.RxChildren) .\n\nThis type defines the options available for appending children when the  `append`  policy is used.\nExamples can be found [here](https://github.com/youwol/rx-vdom/blob/main/src/tests/rx-children-append.test.ts).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildrenOptionsAppend",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ChildrenOptionsAppend<TDomain> = {\n    /**\n     * Observable source of domain data, expected to emit an array of domain data elements.\n     */\n    source$: Observable<TDomain[]>\n    /**\n     * Mapping function that transforms a single element of the emitted domain data into its corresponding\n     * virtual DOM representation.\n     *\n     * @param domainData A single element emitted by `source$`.\n     * @returns The virtual DOM representation of the given domain data.\n     */\n    vdomMap: (domainData: TDomain) => AnyVirtualDOM\n\n    /**\n     * A callback function for executing side effects after the children have been updated.\n     *\n     * @param parent The parent element containing the appended children.\n     * @param update An object describing the rendering update, including added, updated, and removed elements.\n     */\n    sideEffects?: (\n        parent: RxElementTrait,\n        update: RenderingUpdate<TDomain>,\n    ) => void\n\n    /**\n     * Optional function for specifying the order of children in the parent element.\n     * The order is determined by comparing two domain data elements.\n     *\n     * @param d1 The domain data associated with the first element for comparison.\n     * @param d2 The domain data associated with the second element for comparison.\n     * @returns A value indicating the relative order of the two elements:\n     * - A positive value (`> 0`) indicates `d1` should be sorted after `d2`.\n     * - A negative value (`< 0`) indicates `d1` should be sorted before `d2`.\n     */\n    orderOperator?: (d1: TDomain, d2: TDomain) => number\n}",
                "implementation": "",
                "startLine": 106,
                "endLine": 107,
                "references": {
                    "ChildrenOptionsAppend": "@nav/api/.ChildrenOptionsAppend",
                    "TDomain": "1081",
                    "RxElementTrait": "@nav/api/.RxElementTrait",
                    "RenderingUpdate": "@nav/api/.RenderingUpdate",
                    "Observable": "@nav/api/.Observable",
                    "AnyVirtualDOM": "@nav/api/.AnyVirtualDOM"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildrenOptionsReplace",
            "documentation": {
                "sections": [
                    {
                        "content": "API for the  `replace`  policy of  [RxChildren](@nav/api/.RxChildren) .\n\nThis type defines the options available for replacing children when the  `replace`  policy is used.\nExamples can be found [here](https://github.com/youwol/rx-vdom/blob/main/src/tests/rx-children-replace.test.ts).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildrenOptionsReplace",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ChildrenOptionsReplace<TDomain> = {\n    /**\n     * Observable source of domain data.\n     */\n    source$: Observable<TDomain>\n    /**\n     * Mapping function that transforms the emitted domain data into a list of virtual DOM elements.\n     *\n     * @param domainData The domain data emitted by `source$`.\n     * @returns A list of virtual DOM elements that will replace the previous children.\n     */\n    vdomMap: (domainData: TDomain) => AnyVirtualDOM[]\n\n    /**\n     * Virtual DOM elements displayed until the first data is emitted by `source$`.\n     */\n    untilFirst?: AnyVirtualDOM[]\n\n    /**\n     * Optional transformation function for the virtual DOM elements returned by `vdomMap`.\n     * This is useful for applying common transformations before setting the children.\n     *\n     * @param domValue The array of virtual DOM elements returned by `vdomMap`.\n     * @returns The transformed array of virtual DOM elements.\n     */\n    wrapper?: (domValue: AnyVirtualDOM[]) => AnyVirtualDOM[]\n\n    /**\n     * A callback function for executing side effects after the new children have been inserted\n     * into the real DOM.\n     *\n     * @param element The parent element of the newly inserted children, along with the domain\n     * data that was originally emitted by `source$`.\n     */\n    sideEffects?: (element: ResolvedHTMLElement<TDomain>) => void\n}",
                "implementation": "",
                "startLine": 152,
                "endLine": 153,
                "references": {
                    "ChildrenOptionsReplace": "@nav/api/.ChildrenOptionsReplace",
                    "ResolvedHTMLElement": "@nav/api/.ResolvedHTMLElement",
                    "TDomain": "1098",
                    "Observable": "@nav/api/.Observable",
                    "AnyVirtualDOM": "@nav/api/.AnyVirtualDOM"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildrenOptionsSync",
            "documentation": {
                "sections": [
                    {
                        "content": "API for the  `sync`  policy of  [RxChildren](@nav/api/.RxChildren) .\n\nThis type defines the options available for synchronizing children when the  `sync`  policy is used.\nExamples can be found [here](https://github.com/youwol/rx-vdom/blob/main/src/tests/rx-children-sync.test.ts).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildrenOptionsSync",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ChildrenOptionsSync<TDomain> = ChildrenOptionsAppend<TDomain> & {\n    /**\n     * A function to compare two domain data instances for equality.\n     *\n     * By default, reference equality is used for comparisons.\n     *\n     * @param d1 The first domain data for comparison.\n     * @param d2 The second domain data for comparison.\n     * @returns `true` if `d1` and `d2` represent the same element; `false` otherwise.\n     */\n    comparisonOperator?: (d1: TDomain, d2: TDomain) => boolean\n}",
                "implementation": "",
                "startLine": 197,
                "endLine": 198,
                "references": {
                    "ChildrenOptionsSync": "@nav/api/.ChildrenOptionsSync",
                    "ChildrenOptionsAppend": "@nav/api/.ChildrenOptionsAppend",
                    "TDomain": "1106"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildrenPolicy",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the various policies available for managing children in  [RxChildren](@nav/api/.RxChildren) .\n\nThe available policies are:\n- **replace**: All children are replaced each time new item(s) are emitted by  `source$` .\n- **append**: All children are appended with each emission of new item(s) from  `source$` .\n- **sync**: Only updated, new, or deleted children are synchronized when  `source$`  emits a 'store' of\n   `DomainData` , which typically consists of an immutable list of  `DomainData` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildrenPolicy",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ChildrenPolicy = 'replace' | 'append' | 'sync'",
                "implementation": "",
                "startLine": 219,
                "endLine": 220,
                "references": {
                    "ChildrenPolicy": "@nav/api/.ChildrenPolicy"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ChildrenTypesOptionMap",
            "documentation": {
                "sections": [
                    {
                        "content": "A type helper that maps individual  `ChildrenPolicy`  values to their corresponding API options.\n\nThis type provides a structure for defining the available options for each\npolicy when managing child elements in the virtual DOM.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ChildrenTypesOptionMap",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ChildrenTypesOptionMap<TDomain> = {\n    /**\n     * Options for the `replace` policy, defining how child elements should be replaced.\n     */\n    replace: ChildrenOptionsReplace<TDomain>\n    /**\n     * Options for the `append` policy, defining how child elements should be appended.\n     */\n    append: ChildrenOptionsAppend<TDomain>\n    /**\n     * Options for the `sync` policy, defining how child elements should be synchronized.\n     */\n    sync: ChildrenOptionsSync<TDomain>\n}",
                "implementation": "",
                "startLine": 229,
                "endLine": 230,
                "references": {
                    "ChildrenTypesOptionMap": "@nav/api/.ChildrenTypesOptionMap",
                    "ChildrenOptionsAppend": "@nav/api/.ChildrenOptionsAppend",
                    "TDomain": "1113",
                    "ChildrenOptionsReplace": "@nav/api/.ChildrenOptionsReplace",
                    "ChildrenOptionsSync": "@nav/api/.ChildrenOptionsSync"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CustomAttribute",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents custom attributes for HTML elements.\n\nCustom attributes can be defined using camelCase property names in the virtual DOM.\nFor example, if  `aria-expanded='true'`  is expected in the real DOM, it can be provided as:\n ```typescript\n{ ariaExpanded: true }\n```",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CustomAttribute",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type CustomAttribute = { [key: string]: string | boolean | number }",
                "implementation": "",
                "startLine": 253,
                "endLine": 254,
                "references": {
                    "CustomAttribute": "@nav/api/.CustomAttribute"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Equals",
            "documentation": {
                "sections": [
                    {
                        "content": "Check whether 2 types are equals.\n\nSee [type level equal operator](https://github.com/Microsoft/TypeScript/issues/27024) and\n[distributive conditional types](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Equals",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/type-utils.ts",
                "declaration": "export type Equals<X, Y> =\n    (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2\n        ? true\n        : false",
                "implementation": "",
                "startLine": 14,
                "endLine": 15,
                "references": {
                    "Equals": "@nav/api/.Equals",
                    "T": "1185",
                    "X": "1186",
                    "Y": "1187"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExposedMembers",
            "documentation": {
                "sections": [
                    {
                        "content": "Extracts the attributes of an  `HTMLElement`  of the given tag that are exposed in  [VirtualDOM](@nav/api/.VirtualDOM) .\n\nThis type includes:\n- Most writable properties of primitive types ( `string` ,  `number` ,  `boolean` ), with some restrictions\n  (see  [FilterHTMLMembers](@nav/api/.FilterHTMLMembers) ) to provide a lighter API. Notable transformations include:\n  -  `tag` / `tagName`  and  `class` / `className` .\n- All signal handlers, which are any methods starting with the prefix  `on`  (e.g.,  `onclick` ,  `onmousedown` , etc.).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TargetNativeHTMLElement**: The target native HTML element, which extends  `HTMLElement` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExposedMembers",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ExposedMembers<TargetNativeHTMLElement extends HTMLElement> = {\n    [Property in keyof FilterHTMLMembers<TargetNativeHTMLElement>]: TargetNativeHTMLElement[Property] extends string\n        ? AttributeLike<string>\n        : TargetNativeHTMLElement[Property] extends number\n          ? AttributeLike<number>\n          : TargetNativeHTMLElement[Property] extends boolean\n            ? AttributeLike<boolean>\n            : Property extends `on${string}`\n              ? TargetNativeHTMLElement[Property]\n              : never\n}",
                "implementation": "",
                "startLine": 266,
                "endLine": 267,
                "references": {
                    "ExposedMembers": "@nav/api/.ExposedMembers",
                    "FilterHTMLMembers": "@nav/api/.FilterHTMLMembers",
                    "TargetNativeHTMLElement": "1119",
                    "AttributeLike": "@nav/api/.AttributeLike"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FilterHTMLMembers",
            "documentation": {
                "sections": [
                    {
                        "content": "Selects the writable HTML attributes for a given tag to be exposed in  [VirtualDOM](@nav/api/.VirtualDOM) .\n\nThis type filters out the following from the writable attributes:\n- Properties defined by a  [VirtualDOM](@nav/api/.VirtualDOM)  itself, including:\n  -  `className`  and  `tagName` , which are exposed as  `class`  and  `tag` , respectively.\n- Members listed in  [BlackListed](@nav/api/.BlackListed) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TargetNativeHTMLElement**: The target native HTML element, which extends  `HTMLElement` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FilterHTMLMembers",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type FilterHTMLMembers<TargetNativeHTMLElement extends HTMLElement> =\n    Omit<\n        WritablePart<TargetNativeHTMLElement>,\n        | 'tag'\n        | 'tagName'\n        | 'className'\n        | 'children'\n        | 'style'\n        | 'customAttributes'\n        | 'connectedCallback'\n        | 'disconnectedCallback'\n        | BlackListed\n    >",
                "implementation": "",
                "startLine": 288,
                "endLine": 289,
                "references": {
                    "FilterHTMLMembers": "@nav/api/.FilterHTMLMembers",
                    "WritablePart": "@nav/api/.WritablePart",
                    "TargetNativeHTMLElement": "1121",
                    "BlackListed": "@nav/api/.BlackListed"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "NativeHTMLElement",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the native HTML element type corresponding to a specific tag.\nFor example,  `NativeHTMLElement<'div'>`  resolves to  `HTMLDivElement` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **Tag**: The tag name of the DOM element, constrained to  `SupportedHTMLTags` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NativeHTMLElement",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type NativeHTMLElement<Tag extends SupportedHTMLTags> =\n    HTMLElementTagNameMap[Tag]",
                "implementation": "",
                "startLine": 308,
                "endLine": 309,
                "references": {
                    "NativeHTMLElement": "@nav/api/.NativeHTMLElement",
                    "SupportedHTMLTags": "@nav/api/.SupportedHTMLTags",
                    "Tag": "1123"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Observable",
            "documentation": {
                "sections": [
                    {
                        "content": "Required interface representing the RxJS concept of an 'Observable'.\nThis interface includes only the  `subscribe`  method from the full RxJS Observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **T**: The type of values emitted by the observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Observable",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type Observable<T> = Pick<ObservableRxjs<T>, 'subscribe'>",
                "implementation": "",
                "startLine": 27,
                "endLine": 28,
                "references": {
                    "Observable": "@nav/api/.Observable",
                    "T": "1054"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "RenderingUpdate",
            "documentation": {
                "sections": [
                    {
                        "content": "Describes the changes made to DOM elements when using  [RxChildren](@nav/api/.RxChildren) \nwith the  `append`  or  `sync`  policies.\n\nThis type encapsulates the details of the rendering update, including\nelements that have been added, updated, or removed during the operation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "RenderingUpdate",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type RenderingUpdate<TDomain> = {\n    /**\n     * An array of elements that have been added to the DOM.\n     */\n    added: ResolvedHTMLElement<TDomain>[]\n    /**\n     * An array of elements that have been updated in the DOM.\n     */\n    updated: ResolvedHTMLElement<TDomain>[]\n    /**\n     * An array of elements that have been removed from the DOM.\n     */\n    removed: ResolvedHTMLElement<TDomain>[]\n}",
                "implementation": "",
                "startLine": 320,
                "endLine": 321,
                "references": {
                    "RenderingUpdate": "@nav/api/.RenderingUpdate",
                    "ResolvedHTMLElement": "@nav/api/.ResolvedHTMLElement",
                    "TDomain": "1129"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ResolvedHTMLElement",
            "documentation": {
                "sections": [
                    {
                        "content": "Encapsulates an HTML element along with the domain data that was used to create it.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.\n*  **Tag**: The type of the HTML tag, which extends  `SupportedHTMLTags` .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ResolvedHTMLElement",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type ResolvedHTMLElement<\n    TDomain,\n    Tag extends SupportedHTMLTags = SupportedHTMLTags,\n> = {\n    /**\n     * The domain data associated with this element.\n     * This will be `undefined` if the child was defined using a plain HTMLElement\n     * rather than through a reactive construct.\n     */\n    domainData?: TDomain\n\n    /**\n     * The actual DOM element that also implements the {@link RxElementTrait} trait.\n     */\n    element: RxHTMLElement<Tag>\n}",
                "implementation": "",
                "startLine": 341,
                "endLine": 342,
                "references": {
                    "ResolvedHTMLElement": "@nav/api/.ResolvedHTMLElement",
                    "SupportedHTMLTags": "@nav/api/.SupportedHTMLTags",
                    "TDomain": "1134",
                    "RxHTMLElement": "@nav/api/.RxHTMLElement",
                    "Tag": "1135"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "RxAttribute",
            "documentation": {
                "sections": [
                    {
                        "content": "Full specification of a reactive attribute in a virtual DOM context.\n\nExamples can be found in the test suite\n[here](https://github.com/youwol/rx-vdom/blob/main/src/tests/rx-attributes.test.ts).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.\n*  **Target**: The type of the target attribute, which can be one of the following:\n-  `string`  for attributes like  `id` ,  `class` ,  `src` , etc.\n-  `number`  for attributes like  `width` ,  `height` ,  `min` ,  `max` , etc.\n-  `boolean`  for attributes like  `disabled` ,  `checked` ,  `readonly` , etc.\n-  `{ [k: string]: string }`  for style attributes, for example.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "RxAttribute",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type RxAttribute<\n    TDomain = unknown,\n    Target extends AnyHTMLAttribute = AnyHTMLAttribute,\n> = {\n    /**\n     * The source observable that emits domain data.\n     */\n    source$: Observable<TDomain>\n\n    /**\n     * A mapping function that transforms the domain data into the actual attribute value.\n     *\n     * @param domainData The domain data emitted by the `source$`.\n     * @returns The attribute value corresponding to the given domain data.\n     */\n    vdomMap: (domainData: TDomain) => Target\n\n    /**\n     * The initial value of the attribute to be displayed until the first data is emitted by `source$`.\n     * This can be useful for providing a default state.\n     */\n    untilFirst?: Target\n\n    /**\n     * A transformation function applied to the value returned by `vdomMap`\n     * before it is set as the attribute. This is useful for applying common\n     * transformations to the attribute value.\n     *\n     * @param domValue The value of the attribute returned by `vdomMap`.\n     * @returns The transformed attribute value that will be set.\n     */\n    wrapper?: (domValue: Target) => Target\n\n    /**\n     * A callback function for executing side effects after the attribute value has been\n     * updated in the actual DOM. This can be useful for integrating with other libraries\n     * or performing actions that depend on the updated DOM state.\n     *\n     * @param element The updated element, along with the domain data\n     * that was originally emitted by `source$`.\n     */\n    sideEffects?: (element: ResolvedHTMLElement<TDomain>) => void\n}",
                "implementation": "",
                "startLine": 371,
                "endLine": 372,
                "references": {
                    "RxAttribute": "@nav/api/.RxAttribute",
                    "AnyHTMLAttribute": "@nav/api/.AnyHTMLAttribute",
                    "ResolvedHTMLElement": "@nav/api/.ResolvedHTMLElement",
                    "TDomain": "1152",
                    "Observable": "@nav/api/.Observable",
                    "Target": "1153"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "RxChild",
            "documentation": {
                "sections": [
                    {
                        "content": "Full specification of a reactive child component.\n\n<note level=\"hint\">\nIf the  `vdomMap`  or  `wrapper`  attributes return  `undefined` , no  `HTMLElement`  will be produced.\n</note>\n\nFor examples, see [here](https://github.com/youwol/rx-vdom/blob/main/src/tests/rx-child.test.ts).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.\n*  **TVdomMap**: The type of the virtual DOM returned by the  `vdomMap`  function.\n*  **TVdomFinal**: The type of the final virtual DOM that will be inserted into the DOM.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "RxChild",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type RxChild<\n    TDomain = unknown,\n    TVdomMap extends AnyVirtualDOM = AnyVirtualDOM,\n    TVdomFinal extends AnyVirtualDOM = TVdomMap,\n> = {\n    /**\n     * The source observable that emits domain data.\n     */\n    source$: Observable<TDomain>\n\n    /**\n     * A mapping function that transforms the domain data into the associated {@link VirtualDOM}.\n     *\n     * @param domainData The domain data emitted by the `source$`.\n     * @returns The virtual DOM representation based on the provided domain data.\n     */\n    vdomMap: (domainData: TDomain) => TVdomMap\n\n    /**\n     * The initial virtual DOM to be displayed until the first data is emitted by `source$`.\n     * This is useful for providing a placeholder or loading state.\n     */\n    untilFirst?: AnyVirtualDOM\n\n    /**\n     * A transformation function applied to the virtual DOM returned by `vdomMap`\n     * before it is set as a child. This is useful for applying common transformations\n     * to the virtual DOM.\n     *\n     * @param domValue The virtual DOM value returned by `vdomMap`.\n     * @returns The transformed virtual DOM that will be used as the final child.\n     */\n    wrapper?: (domValue: TVdomMap) => TVdomFinal\n\n    /**\n     * A callback function for executing side effects after the new child has been\n     * updated in the actual DOM. This can be useful for integrating with other\n     * libraries or performing actions that depend on the updated DOM state.\n     *\n     * @param element The newly inserted child element, along with the domain data\n     * that was originally emitted by `source$`.\n     */\n    sideEffects?: (\n        element: ResolvedHTMLElement<TDomain, TVdomFinal['tag']>,\n    ) => void\n}",
                "implementation": "",
                "startLine": 428,
                "endLine": 429,
                "references": {
                    "RxChild": "@nav/api/.RxChild",
                    "AnyVirtualDOM": "@nav/api/.AnyVirtualDOM",
                    "TVdomMap": "1171",
                    "ResolvedHTMLElement": "@nav/api/.ResolvedHTMLElement",
                    "TDomain": "1170",
                    "TVdomFinal": "1172",
                    "Observable": "@nav/api/.Observable"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "RxChildren",
            "documentation": {
                "sections": [
                    {
                        "content": "Full specification of reactive children in a virtual DOM context.\n\nExample usage and policies can be found in the following documents:\n- **replace**:  [ChildrenOptionsReplace](@nav/api/.ChildrenOptionsReplace) \n- **append**:  [ChildrenOptionsAppend](@nav/api/.ChildrenOptionsAppend) \n- **sync**:  [ChildrenOptionsSync](@nav/api/.ChildrenOptionsSync)",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **Policy**: The policy to be used for managing children, which can be one of the following:\n  -  `replace` : Replaces existing children with new ones.\n  -  `append` : Appends new children to the existing ones.\n  -  `sync` : Synchronizes the state of children based on the domain data.\n  Refer to  [ChildrenPolicy](@nav/api/.ChildrenPolicy)  for more details on available policies.\n*  **TDomain**: The type of the domain data conveyed by the  `source$`  observable.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "RxChildren",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type RxChildren<Policy extends ChildrenPolicy, TDomain = unknown> = {\n    /**\n     * The policy defining how children should be managed.\n     */\n    policy: Policy\n} & ChildrenTypesOptionMap<TDomain>[Policy]",
                "implementation": "",
                "startLine": 490,
                "endLine": 491,
                "references": {
                    "RxChildren": "@nav/api/.RxChildren",
                    "ChildrenPolicy": "@nav/api/.ChildrenPolicy",
                    "Policy": "1176",
                    "ChildrenTypesOptionMap": "@nav/api/.ChildrenTypesOptionMap",
                    "TDomain": "1177"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "RxHTMLElement",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the actual HTMLElement rendered from a  [VirtualDOM](@nav/api/.VirtualDOM) .\nIt implements the standard HTMLElement API for the corresponding tag,\nenhanced with the  [reactive trait](@nav/api/.RxElementTrait) .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **Tag**: The tag name of the DOM element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "RxHTMLElement",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/virtual-dom.ts",
                "declaration": "export type RxHTMLElement<Tag extends SupportedHTMLTags> = RxElementTrait &\n    NativeHTMLElement<Tag>",
                "implementation": "",
                "startLine": 96,
                "endLine": 97,
                "references": {
                    "RxHTMLElement": "@nav/api/.RxHTMLElement",
                    "SupportedHTMLTags": "@nav/api/.SupportedHTMLTags",
                    "RxElementTrait": "@nav/api/.RxElementTrait",
                    "NativeHTMLElement": "@nav/api/.NativeHTMLElement",
                    "Tag": "89"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Subscription",
            "documentation": {
                "sections": [
                    {
                        "content": "Required interface for Rx concept of 'Subscription', as defined by RxJS.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Subscription",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type Subscription = Pick<SubscriptionRxjs, 'unsubscribe'>",
                "implementation": "",
                "startLine": 32,
                "endLine": 33,
                "references": {
                    "Subscription": "@nav/api/.Subscription"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SupportedHTMLTags",
            "documentation": {
                "sections": [
                    {
                        "content": "Supported tags encompass all [HTML elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) by default,\nwith the following exceptions:\n*   `dialog` : Results in a runtime error due to an inability to be instantiated in Mozilla.\n*   `search` :  Causes a runtime error due to instantiation issues in Jest tests.\n\nCustomization of supported HTML tags can be defined in the  `rx-vdom-config.ts`  file.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SupportedHTMLTags",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/factory.ts",
                "declaration": "export type SupportedHTMLTags = Configuration['SupportedHTMLTags']",
                "implementation": "",
                "startLine": 39,
                "endLine": 40,
                "references": {
                    "SupportedHTMLTags": "@nav/api/.SupportedHTMLTags"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "VirtualDOM",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents a Virtual DOM element that mirrors the structure and characteristics of an HTML DOM element.\nIt allows attributes and children to be supplied reactively via the concept of **observable** (from reactive programming).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **Tag**: The tag name of the DOM element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "VirtualDOM",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/virtual-dom.ts",
                "declaration": "export type VirtualDOM<Tag extends SupportedHTMLTags> = {\n    /**\n     * The tag of the element, equivalent to the `tagName` property of `HTMLElement`.\n     */\n    tag: Tag\n\n    /**\n     * The class associated with the element, equivalent to the `className` property of `HTMLElement`.\n     */\n    class?: AttributeLike<string>\n\n    /**\n     * The style associated with the element. Typically for a static value:\n     * ```typescript\n     * {\n     *      tag: 'div',\n     *      style: {\n     *          backgroundColor: 'blue'\n     *      }\n     * }\n     * ```\n     * For more details on hyphenated properties, see {@link CSSAttribute}.\n     */\n    style?: AttributeLike<CSSAttribute>\n\n    /**\n     * Additional custom attributes for the element.\n     * For example, the attributes 'aria-label' and 'aria-expanded' in the following:\n     * ```html\n     * <button aria-label=\"Close\" aria-expanded=\"false\"></button>\n     * ```\n     * would be represented in the virtual DOM as:\n     * ```typescript\n     * {\n     *      tag: 'button',\n     *      customAttributes: {\n     *          ariaLabel: 'Close',\n     *          ariaExpanded: false\n     *      }\n     * }\n     * ```\n     * For more details on hyphenated properties, see {@link CustomAttribute}.\n     */\n    customAttributes?: AttributeLike<CustomAttribute>\n\n    /**\n     * Children of the element.\n     */\n    children?: ChildrenLike\n\n    /**\n     * Lifecycle hook called just after the element has been attached to the document's DOM.\n     *\n     * @param element A reference to the attached HTML element.\n     */\n    connectedCallback?: (element: RxHTMLElement<Tag>) => void\n\n    /**\n     * Lifecycle hook called just after the element has been detached from the document's DOM.\n     *\n     * @param element A reference to the detached HTML element.\n     */\n    disconnectedCallback?: (element: RxHTMLElement<Tag>) => void\n} & (TypeCheck extends 'none'\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- Index signature effectively optional if `TypeCheck` is disabled\n      { [k: string]: any }\n    : Partial<ExposedMembers<NativeHTMLElement<Tag>>>)",
                "implementation": "",
                "startLine": 21,
                "endLine": 22,
                "references": {
                    "VirtualDOM": "@nav/api/.VirtualDOM",
                    "SupportedHTMLTags": "@nav/api/.SupportedHTMLTags",
                    "ChildrenLike": "@nav/api/.ChildrenLike",
                    "AttributeLike": "@nav/api/.AttributeLike",
                    "RxHTMLElement": "@nav/api/.RxHTMLElement",
                    "Tag": "87",
                    "CustomAttribute": "@nav/api/.CustomAttribute",
                    "CSSAttribute": "@nav/api/.CSSAttribute",
                    "ExposedMembers": "@nav/api/.ExposedMembers",
                    "NativeHTMLElement": "@nav/api/.NativeHTMLElement"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "VirtualDOMTagNameMap",
            "documentation": {
                "sections": [
                    {
                        "content": "A mapping between possible HTML tag names, as defined in  `HTMLElementTagNameMap` ,\nand their associated  [VirtualDOM](@nav/api/.VirtualDOM)  representations.\n\nThis type creates a dynamic mapping, where each key is a valid HTML tag from  `SupportedHTMLTags` ,\nand the corresponding value is a  [VirtualDOM](@nav/api/.VirtualDOM)  for that tag.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "VirtualDOMTagNameMap",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/api.ts",
                "declaration": "export type VirtualDOMTagNameMap = {\n    [Property in SupportedHTMLTags]: VirtualDOM<Property>\n}",
                "implementation": "",
                "startLine": 504,
                "endLine": 505,
                "references": {
                    "VirtualDOMTagNameMap": "@nav/api/.VirtualDOMTagNameMap",
                    "SupportedHTMLTags": "@nav/api/.SupportedHTMLTags",
                    "VirtualDOM": "@nav/api/.VirtualDOM"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WritableKeysOf",
            "documentation": {
                "sections": [
                    {
                        "content": "Extract the writable keys of a type.\n\nTaken from this [SO discussion](https://stackoverflow.com/questions/52443276/how-to-exclude-getter-only-properties-from-type-in-typescript)",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WritableKeysOf",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/type-utils.ts",
                "declaration": "export type WritableKeysOf<T> = {\n    [P in keyof T]: Equals<\n        { [Q in P]: T[P] },\n        { -readonly [Q in P]: T[P] }\n    > extends true\n        ? P\n        : never\n}[keyof T]",
                "implementation": "",
                "startLine": 24,
                "endLine": 25,
                "references": {
                    "WritableKeysOf": "@nav/api/.WritableKeysOf",
                    "T": "1189",
                    "Equals": "@nav/api/.Equals"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WritablePart",
            "documentation": {
                "sections": [
                    {
                        "content": "Extract writable part of a type.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **T**: type to transform",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WritablePart",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/type-utils.ts",
                "declaration": "export type WritablePart<T> = Pick<T, WritableKeysOf<T>>",
                "implementation": "",
                "startLine": 38,
                "endLine": 39,
                "references": {
                    "WritablePart": "@nav/api/.WritablePart",
                    "T": "1191",
                    "WritableKeysOf": "@nav/api/.WritableKeysOf"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "ReactiveTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a regular  `HTMLElement`  into a reactive one by augmenting it with reactive capabilities.\nThis allows you to manage the lifecycle of subscriptions and provides additional hooks for DOM events,\nsuch as when the element is added or removed from the page.\n\nThe reactive enhancements include:\n-  `vDom: Readonly<VirtualDOM<Tag>>` : Represents the associated Virtual DOM.\n-  `ownSubscriptions(...subs: Subscription[]): void` : Enables you to attach RxJS subscriptions to the element.\nThese subscriptions will be automatically unsubscribed (last in, first out) when the element is removed from the page.\n-  `hookOnDisconnected(...callbacks: (() => void)[]): void` : Registers callback functions to be executed when the\nelement is removed from the DOM. Callbacks are executed in the reversed order of registration.\n\nThe returned class extends the provided base  `HTMLElement`  constructor and adds the reactive functionality\ndescribed above.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **T**: The type of the constructor of the regular HTMLElement.\n*  **Tag**: The associated HTML tag.\n*  **Base**: The base constructor of the regular HTMLElement.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "A class that extends the provided  `Base`  constructor and adds reactive functionality to it.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ReactiveTrait",
            "code": {
                "filePath": "src/lib/core.ts",
                "declaration": "export function ReactiveTrait<\n    T extends Constructor<HTMLElement>,\n    Tag extends SupportedHTMLTags,\n>(Base: T)",
                "implementation": "export function ReactiveTrait<\n    T extends Constructor<HTMLElement>,\n    Tag extends SupportedHTMLTags,\n>(Base: T) {\n    return class extends Base {\n        /**\n         * Virtual DOM\n         */\n        vDom: Readonly<VirtualDOM<Tag>>\n\n        /**\n         * @ignore\n         */\n        subscriptions = new Array<Subscription>()\n\n        /**\n         * @ignore\n         */\n        disconnectionHooks: (() => void)[] = []\n\n        /**\n         * @ignore\n         */\n        initializeVirtualDom(vDom: VirtualDOM<Tag>) {\n            this.vDom = vDom\n        }\n        /**\n         * @ignore\n         */\n        connectedCallback() {\n            const { attributes, children } = extractRxStreams<Tag>(this.vDom)\n\n            attributes\n                .filter(([_, v]) => !instanceOfStream(v))\n                .forEach(([k, v]: [k: string, v: AnyHTMLAttribute]) => {\n                    this.applyAttribute(k, v)\n                })\n\n            attributes\n                .filter(([_, v]) => instanceOfStream(v))\n                .forEach(\n                    ([k, attr$]: [\n                        k: string,\n                        attr$: RxStream<AnyHTMLAttribute>,\n                    ]) => {\n                        this.subscriptions.push(\n                            attr$.subscribe((v: AnyHTMLAttribute) => {\n                                this.applyAttribute(k, v)\n                                return this as unknown as RxHTMLElement<Tag>\n                            }, this),\n                        )\n                    },\n                )\n            if (Array.isArray(children)) {\n                this.renderChildren(children)\n            }\n            if (instanceOfStream<unknown, AnyVirtualDOM[]>(children)) {\n                this.subscriptions.push(\n                    children.subscribe((children) => {\n                        this.replaceChildren()\n                        this.renderChildren(children)\n                        return this as unknown as RxHTMLElement<Tag>\n                    }),\n                )\n            }\n\n            if (instanceOfChildrenStream(children)) {\n                this.subscriptions.push(\n                    children.subscribe(this as unknown as RxHTMLElement<Tag>),\n                )\n            }\n            this.vDom?.connectedCallback?.(\n                this as unknown as RxHTMLElement<Tag>,\n            )\n        }\n\n        /**\n         * @ignore\n         */\n        disconnectedCallback() {\n            this.subscriptions.reverse().forEach((s) => s.unsubscribe())\n            this.disconnectionHooks.reverse().forEach((cb) => cb())\n            this.vDom?.disconnectedCallback?.(\n                this as unknown as RxHTMLElement<Tag>,\n            )\n        }\n\n        /**\n         * @ignore\n         */\n        renderChildren(children: ConvertedChildLike[]): Array<RxElementTrait> {\n            const rendered = []\n            children\n                .filter((child) => child != undefined)\n                .forEach((child) => {\n                    if (instanceOfStream(child)) {\n                        const placeHolder = document.createElement(\n                            `${customElementPrefix}-placeholder`,\n                        ) as HTMLPlaceHolderElement\n                        this.appendChild(placeHolder)\n                        this.subscriptions.push(placeHolder.initialize(child))\n                        rendered.push(placeHolder)\n                    } else if (child instanceof HTMLElement) {\n                        this.appendChild(child)\n                    } else {\n                        const div = render(child)\n                        this.appendChild(div)\n                        rendered.push(div)\n                    }\n                })\n            return rendered\n        }\n        /**\n         * @ignore\n         */\n        applyAttribute(name: string, value: AnyHTMLAttribute) {\n            const binding = specialBindings[name]\n                ? () => specialBindings[name](this, value)\n                : () => (this[name] = value)\n            binding()\n        }\n\n        /**\n         * Adds subscriptions to the element, marking them as \"owned\" by it.\n         *\n         * When the element is removed from the DOM, all owned subscriptions are automatically unsubscribed.\n         *\n         * The resource cleanup process upon element disconnection follows these steps:\n         * 1. Unsubscribe all subscriptions registered via `ownSubscriptions`, in reverse order (LIFO).\n         * 2. Execute any hooks registered via `hookOnDisconnected`, in reverse order (LIFO).\n         * 3. Finally, invoke the optional `disconnectedCallback` defined in the associated {@link VirtualDOM},\n         * if present.\n         *\n         * @param subs - The subscriptions to be owned by this element. They will be unsubscribed upon disconnection.\n         */\n        ownSubscriptions(...subs: Subscription[]) {\n            this.subscriptions.push(...subs)\n        }\n\n        /**\n         * Registers callbacks to be invoked when the element is disconnected from the DOM.\n         *\n         * These callbacks are executed after the element's owned subscriptions (registered via `ownSubscriptions`)\n         * have been unsubscribed, but before invoking the optional `disconnectedCallback` provided in the\n         * {@link VirtualDOM}.\n         *\n         * The callbacks are executed in reverse order of registration (last in, first out), ensuring that\n         * any resources or actions dependent on the order of registration are cleaned up correctly.\n         *\n         * This method is useful for performing additional resource cleanup or other actions when the element is\n         * removed from the DOM.\n         *\n         * @param callbacks - The functions to be executed when the element is disconnected from the DOM.\n         */\n        hookOnDisconnected(...callbacks: (() => void)[]) {\n            this.disconnectionHooks.push(...callbacks)\n        }\n    }\n}",
                "startLine": 241,
                "endLine": 400,
                "references": {
                    "ReactiveTrait": "@nav/api/.ReactiveTrait",
                    "T": "1194",
                    "__class": "1197",
                    "Tag": "1195"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "render",
            "documentation": {
                "sections": [
                    {
                        "content": "Transforms a  [VirtualDOM](@nav/api/.VirtualDOM)  into a corresponding  [RxHTMLElement](@nav/api/.RxHTMLElement) .\n\n> The HTML element returned is initialized **only when attached** to the document's DOM tree.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **vDom**: The virtual DOM to render.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The corresponding DOM element.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "render",
            "code": {
                "filePath": "src/lib/virtual-dom.ts",
                "declaration": "export function render<Tag extends SupportedHTMLTags>(\n    vDom: VirtualDOM<Tag>,\n): RxHTMLElement<Tag>",
                "implementation": "export function render<Tag extends SupportedHTMLTags>(\n    vDom: VirtualDOM<Tag>,\n): RxHTMLElement<Tag> {\n    if (vDom == undefined) {\n        console.error('Got an undefined virtual DOM, return empty div')\n        return undefined\n    }\n    const tag = vDom['tag'] || ('div' as const)\n\n    const element: RxHTMLElement<Tag> = factory<Tag>(tag as unknown as Tag)\n    // why 'never', could have been 'any' but my IDE suggest never is better :/\n    // The problem is that somehow the signature of the method 'initializeVirtualDom' is doubled:\n    //  {(vDom: VirtualDOM<Tag>): void, (vDom: VirtualDOM<SupportedTags>): void}\n    // I don't get why.\n    element.initializeVirtualDom(vDom as never)\n    return element\n}",
                "startLine": 107,
                "endLine": 124,
                "references": {
                    "render": "@nav/api/.render",
                    "VirtualDOM": "@nav/api/.VirtualDOM",
                    "Tag": "92",
                    "RxHTMLElement": "@nav/api/.RxHTMLElement"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "api.ts",
            "path": "src/lib/api.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "Gathers the types involved in 's API.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "type-utils.ts",
            "path": "src/lib/type-utils.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "Gathers low level operations on types.Check whether 2 types are equals.\n\nSee [type level equal operator](https://github.com/Microsoft/TypeScript/issues/27024) and\n[distributive conditional types](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types).",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "virtual-dom.ts",
            "path": "src/lib/virtual-dom.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "factory.ts",
            "path": "src/lib/factory.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "auto-generated.ts",
            "path": "src/auto-generated.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "core.ts",
            "path": "src/lib/core.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
